// src/stream.ts
var StreamOverMIDI;
((StreamOverMIDI2) => {
  function wrapAsWritable(arg, options) {
    if (arg instanceof MIDIOutput) return wrapAsWritable((chunk) => arg.send(chunk));
    const mode = options?.mode ?? "binary";
    let encoder2 = new TextEncoder();
    return new WritableStream({
      async write(chunk, controller) {
        let data;
        if (chunk instanceof ArrayBuffer) data = new Uint8Array(chunk);
        else if (chunk instanceof Uint8Array || chunk instanceof Array) data = chunk;
        else if (chunk instanceof Blob) data = new Uint8Array(await chunk.arrayBuffer());
        else if (typeof chunk == "string") data = encoder2.encode(chunk);
        else controller.error(new Error("Unsupported chunk type: " + chunk));
        const buffer = new Uint8Array(3 + (mode == "binary" ? Math.ceil(data.length * 8 / 7) : data.length));
        buffer[0] = 240;
        buffer[1] = options?.manufacturerId ?? 125;
        let int = 0, offset = 0, storedBits = 0;
        for (let i = 0; i < data.length; i++) {
          if (mode == "ascii") {
            buffer[2 + i] = data[i] & 127;
            continue;
          }
          int <<= 8;
          int |= data[i];
          storedBits += 8;
          while (storedBits >= 7) {
            const mask = 127 << storedBits - 7;
            buffer[2 + offset] = (int & mask) >> storedBits - 7;
            storedBits -= 7;
            int &= ~mask;
            offset++;
          }
        }
        if (storedBits > 0) buffer[2 + offset] = int << 7 - storedBits;
        buffer[buffer.length - 1] = 247;
        arg(buffer);
      }
    });
  }
  StreamOverMIDI2.wrapAsWritable = wrapAsWritable;
  function wrapAsReadable(port, options) {
    const mode = options?.mode ?? "binary";
    return new ReadableStream({
      start(controller) {
        let onMidiMessage;
        let onStateChange;
        port.addEventListener("midimessage", onMidiMessage = (e) => {
          const { data } = e;
          if (!(data[0] == 240 && data[1] == (options?.manufacturerId ?? 125))) return;
          const asciiSize = data.length - 3;
          const binarySize = Math.ceil(asciiSize * 7 / 8);
          const buffer = new Uint8Array(mode == "ascii" ? asciiSize : binarySize);
          let int = 0, offset = 0, storedBits = 0;
          for (let i = 0; i < data.length - 3; i++) {
            if (data[2 + i] == 247) break;
            if (mode == "ascii") {
              buffer[i] = data[2 + i] & 127;
              continue;
            }
            int <<= 7;
            int |= data[2 + i];
            storedBits += 7;
            while (storedBits >= 8) {
              const mask = 255 << storedBits - 8;
              buffer[offset] = (int & mask) >> storedBits - 8;
              storedBits -= 8;
              int &= ~mask;
              offset++;
            }
          }
          controller.enqueue(buffer.slice(0, offset));
        });
        port.addEventListener("statechange", onStateChange = () => {
          if (port.state == "disconnected") {
            controller.close();
            port.removeEventListener("midimessage", onMidiMessage);
            port.removeEventListener("statechange", onStateChange);
          }
        });
      }
    });
  }
  StreamOverMIDI2.wrapAsReadable = wrapAsReadable;
})(StreamOverMIDI || (StreamOverMIDI = {}));

// src/index.ts
var midiAccess = void 0;
var selectedInput = void 0;
var selectedInputStream = void 0;
var selectedOutput = void 0;
var selectedOutputStream = void 0;
document.getElementById("request-permission").addEventListener("click", async () => {
  midiAccess = await navigator.requestMIDIAccess({ sysex: true });
  messageLog("Obtained permission!");
  refreshList();
});
document.getElementById("refresh").addEventListener("click", refreshList);
document.getElementById("send").addEventListener("click", () => sendMessage(document.getElementById("message").value));
var encoder = new TextEncoder();
var decoder = new TextDecoder();
function refreshList() {
  populateDevicesList(document.getElementById("input-devices"), midiAccess.inputs, async (port) => {
    selectedInput = port;
    selectedInputStream = StreamOverMIDI.wrapAsReadable(selectedInput);
    messageLog(`[SYSTEM] Selected input: ${port.id}`);
    const reader = selectedInputStream.getReader();
    while (true) {
      const result = await reader.read();
      if (result.done) break;
      messageLog(`${port.id} -> ${decoder.decode(result.value)}`);
    }
  });
  populateDevicesList(document.getElementById("output-devices"), midiAccess.outputs, async (port) => {
    selectedOutput = port;
    if (selectedOutputStream) await selectedOutputStream.close();
    selectedOutputStream = StreamOverMIDI.wrapAsWritable(selectedOutput);
    messageLog(`[SYSTEM] Selected output: ${port.id}`);
  });
}
var logList = document.getElementById("message-log");
function messageLog(message) {
  const pre = document.createElement("pre");
  pre.textContent = message;
  logList.append(pre);
}
function populateDevicesList(element, devices, callback) {
  element.childNodes.forEach((node) => node.remove());
  for (let [id, port] of devices) {
    const div = document.createElement("div");
    const label = document.createElement("span");
    label.textContent = `ID: ${id} - ${port.name} (${port.manufacturer}) `;
    const button = document.createElement("button");
    button.textContent = "Use this device";
    button.disabled = port == selectedInput || port == selectedOutput;
    button.addEventListener("click", () => {
      callback(port);
      populateDevicesList(element, devices, callback);
    });
    div.append(label, button);
    element.append(div);
  }
}
async function sendMessage(message) {
  const writer = selectedOutputStream.getWriter();
  await writer.write(encoder.encode(message));
  writer.releaseLock();
  messageLog(`${selectedOutput.id} <- ${message}`);
}
//# sourceMappingURL=data:application/json;base64,
